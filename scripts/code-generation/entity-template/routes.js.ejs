const Controller = require('./controller');
const Service = require('./service');

/**
 * @typedef <%= entityInPascalCase %>sCount
 * @property {number} count - total of <%= entity %>s
 */

module.exports = ({ router, db }) => {
  const service = new Service(db, '<%= entity %>');
  const controller = new Controller(service);

  const route = router.route('/<%= entity %>');
  const forSingleRoute = router.route('/<%= entity %>/:id');
  const countRoute = router.route('/<%= entity %>/get/count');

  /**
   * Gets some <%= entityInPascalCase %>s
   * @route GET /<%= domain %>/<%= entity %>
   * @operationId get<%= entityInPascalCase %>s
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Gets some <%= entityInPascalCase %>s
   *
   * @param {string} where.query - conditions
   * @returns {<%= entityInPascalCase %>.model} 200 - <%= entityInPascalCase %> object
   * @returns {Error}  default - Unexpected error
   */
  route.get((...args) => controller.find(...args));

  /**
   * Gets one <%= entityInPascalCase %> by Id
   * @route GET /<%= domain %>/<%= entity %>/{id}
   * @operationId get<%= entityInPascalCase %>ById
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Gets one <%= entityInPascalCase %> by Id
   *
   * @param {string} id.path.required - id of object
   * @returns {<%= entityInPascalCase %>.model} 200 - <%= entityInPascalCase %> object
   * @returns {Error} 404 - item not found
   * @returns {Error}  default - Unexpected error
   */
   forSingleRoute.get((...args) => controller.findById(...args));


   /**
   * Counts the <%= entityInPascalCase %> that match condition
   * @route GET /<%= domain %>/<%= entity %>/get/count
   * @operationId count<%= entityInPascalCase %>s
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Counts the <%= entityInPascalCase %>s for conditions
   *
   * @param {string} where.query - conditions
   * @returns {<%= entityInPascalCase %>sCount.model} 200 - the total of <%= entity %>s
   * @returns {Error}  default - Unexpected error
   */
  countRoute.get((...args) => controller.count(...args));


  /**
   * Gets one <%= entityInPascalCase %>
   * @route GET /<%= domain %>/<%= entity %>
   * @operationId get<%= entityInPascalCase %>
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Gets one <%= entityInPascalCase %>
   *
   * @param {string} where.query - condition to find 
   * @returns {<%= entityInPascalCase %>.model} 200 - <%= entityInPascalCase %> object
   * @returns {Error}  default - Unexpected error
   */
   forSingleRoute.get((...args) => controller.findOne(...args));


  /**
   * Creates one <%= entityInPascalCase %>
   * @route POST /<%= domain %>/<%= entity %>
   * @operationId create<%= entityInPascalCase %>
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Creates one <%= entityInPascalCase %>
   *
   * @param {<%= entityInPascalCase %>.model} data.body.required - data of <%= entityInPascalCase %> to create
   * @returns {<%= entityInPascalCase %>.model} 200 - <%= entityInPascalCase %> object
   * @returns {Error}  default - Unexpected error
   */
  route.post((...args) => controller.create(...args));

  /**
   * Updates some <%= entityInPascalCase %>s
   * @route PUT /<%= domain %>/<%= entity %>
   * @operationId update<%= entityInPascalCase %>s
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Updates some <%= entityInPascalCase %>s
   *
   * @param {<%= entityInPascalCase %>.model} data.body.required - data of <%= entityInPascalCase %> to update
   * @param {string} where.query.required - condition to update the <%= entityInPascalCase %>s
   * @returns {<%= entityInPascalCase %>.model} 200 - <%= entityInPascalCase %> object
   * @returns {Error}  default - Unexpected error
   */
  route.put((...args) => controller.update(...args));


  /**
   * Deletes one <%= entityInPascalCase %>
   * @route DELETE /<%= domain %>/<%= entity %>/{id}
   * @operationId delete<%= entityInPascalCase %>
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Deletes one <%= entityInPascalCase %>
   *
   * @param {string} id.path.required - id of the <%= entityInPascalCase %> to delete
   * @returns {<%= entityInPascalCase %>.model} 200 - <%= entityInPascalCase %> object
   * @returns {Error}  default - Unexpected error
   */
   forSingleRoute.delete((...args) => controller.deleteOne(...args));


  /**
   * Deletes some <%= entityInPascalCase %>s
   * @route DELETE /<%= domain %>/<%= entity %>
   * @operationId deleteSome<%= entityInPascalCase %>s
   * @produces application/json application/xml
   * @consumes application/json application/xml
   * @group <%= domainInCamel %>.<%= entityInCamel %> - Operations about <%= entityInCamel %>
   * @summary Deletes some <%= entityInPascalCase %>s
   *
   * @param {string} where.query.required - conditions to delete the <%= entityInPascalCase %>s
   * @returns {<%= entityInPascalCase %>.model} 200 - <%= entityInPascalCase %> object
   * @returns {Error}  default - Unexpected error
   */
  route.delete((...args) => controller.delete(...args));
};
